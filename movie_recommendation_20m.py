# -*- coding: utf-8 -*-
"""Movie recommendation 20M.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16AWdc_9IwE-Qe0Qddf2TB2NGkAfdbMVq
"""

import pandas as pd

import numpy as np

import warnings

warnings.filterwarnings('ignore')

#get dataset
df=pd.read_csv('movie.csv')

df.head()

ratings=pd.read_csv('rating.csv')

ratings.head()

ratings=ratings[['movieId','rating']]

ratings.head()

df=pd.merge(df,ratings)

df.head()

#exploratory data analysis

import matplotlib.pyplot as plt

import seaborn as sns

df.groupby('title').mean()['rating'].sort_values(ascending=False)

df.groupby('title').count()['rating'].sort_values(ascending=False)

#creat a dataframe
rating=pd.DataFrame(df.groupby('title').mean()['rating'])

rating.head()

rating['no of ratings']=df.groupby('title').count()['rating']

rating.head()

rating.sort_values(by='rating',ascending=False)

plt.hist(rating['no of ratings'],bins=70)
plt.show()

plt.hist(rating['rating'],bins=70)
plt.show()

sns.jointplot(x='rating',y='no of ratings',data=rating)

#create movie recommendation
df.head()

id=pd.read_csv('tag.csv')

id.head()

id=id[['userId','movieId']]

id.head()

df=pd.merge(df,id,on='movieId')

df.head()

movie_matrix=df.pivot_table(index='userId',columns='title',values='rating')

movie_matrix.head()

#highest no of ratings
rating.sort_values('no of ratings',ascending=False).head()

movie_user_rating=movie_matrix['Jurassic Park (1993)']
movie_user_rating.head()

similar_to_movie=movie_matrix.corrwith(movie_user_rating)
similar_to_movie.head()

corr_movie=pd.DataFrame(similar_to_movie,columns=['Correlation'])
corr_movie.dropna(inplace=True)

corr_movie.head()

corr_movie.sort_values('Correlation',ascending=False).head()

corr_movie=corr_movie.join(rating['no of ratings'])
corr_movie.head()

corr_movie[corr_movie['no of ratings']>100].sort_values('Correlation',ascending=False)

#predict function

def Predict_movie(movie):
  movie_user_rating=movie_matrix[movie]
  similar_to_movie=movie_matrix.corrwith(movie_user_rating)

  corr_movie=pd.DataFrame(similar_to_movie,columns=['Correlation'])
  corr_movie.dropna(inplace=True)

  corr_movie=corr_movie.join(rating['no of ratings'])
  predicton=corr_movie[corr_movie['no of ratings']>100].sort_values('Correlation',ascending=False)
  return predicton

rr=Predict_movie('Licence to Kill (1989)')

rr.head()

rr=Predict_movie('Donnie Darko (2001)')
rr.head()

